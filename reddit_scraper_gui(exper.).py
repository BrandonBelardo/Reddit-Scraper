# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'reddit_scraper_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import threading

from PyQt5 import QtCore, QtGui, QtWidgets
from notify_run import Notify
from selenium import webdriver
from selenium.webdriver.firefox.options import Options
from datetime import datetime
import time
import sys


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(664, 419)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(140, 29, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label1.setFont(font)
        self.label1.setObjectName("label1")
        self.plainTextEdit1 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit1.setGeometry(QtCore.QRect(260, 20, 111, 41))
        self.plainTextEdit1.setTabChangesFocus(True)
        self.plainTextEdit1.setOverwriteMode(False)
        self.plainTextEdit1.setObjectName("plainTextEdit1")
        self.label2 = QtWidgets.QLabel(self.centralwidget)
        self.label2.setGeometry(QtCore.QRect(140, 70, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label2.setFont(font)
        self.label2.setObjectName("label2")
        self.plainTextEdit2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit2.setGeometry(QtCore.QRect(260, 70, 181, 25))
        self.plainTextEdit2.setTabChangesFocus(True)
        self.plainTextEdit2.setOverwriteMode(False)
        self.plainTextEdit2.setObjectName("plainTextEdit2")
        self.label3 = QtWidgets.QLabel(self.centralwidget)
        self.label3.setGeometry(QtCore.QRect(140, 104, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label3.setFont(font)
        self.label3.setWordWrap(False)
        self.label3.setObjectName("label3")
        self.plainTextEdit3 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit3.setGeometry(QtCore.QRect(260, 103, 181, 25))
        self.plainTextEdit3.setTabChangesFocus(True)
        self.plainTextEdit3.setOverwriteMode(False)
        self.plainTextEdit3.setObjectName("plainTextEdit3")
        self.pushButton1 = QtWidgets.QPushButton(self.centralwidget, clicked=lambda : self.button_press())
        self.pushButton1.setGeometry(QtCore.QRect(460, 50, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(14)
        self.pushButton1.setFont(font)
        self.pushButton1.setObjectName("pushButton1")
        self.label6 = QtWidgets.QLabel(self.centralwidget)
        self.label6.setGeometry(QtCore.QRect(120, 200, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label6.setFont(font)
        self.label6.setWordWrap(False)
        self.label6.setObjectName("label6")
        self.label7 = QtWidgets.QLabel(self.centralwidget)
        self.label7.setGeometry(QtCore.QRect(430, 200, 131, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label7.setFont(font)
        self.label7.setWordWrap(False)
        self.label7.setObjectName("label7")
        self.plainTextEdit4 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit4.setGeometry(QtCore.QRect(20, 230, 301, 141))
        self.plainTextEdit4.setReadOnly(True)
        self.plainTextEdit4.setObjectName("plainTextEdit4")
        self.plainTextEdit5 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit5.setGeometry(QtCore.QRect(340, 230, 301, 141))
        self.plainTextEdit5.setReadOnly(True)
        self.plainTextEdit5.setObjectName("plainTextEdit5")
        self.radioButton1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton1.setGeometry(QtCore.QRect(140, 137, 181, 20))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        self.radioButton1.setFont(font)
        self.radioButton1.setObjectName("radioButton1")
        self.label5 = QtWidgets.QLabel(self.centralwidget)
        self.label5.setGeometry(QtCore.QRect(20, 372, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.label5.setFont(font)
        self.label5.setWordWrap(False)
        self.label5.setObjectName("label5")
        self.label4 = QtWidgets.QLabel(self.centralwidget)
        self.label4.setGeometry(QtCore.QRect(320, 137, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Corbel")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label4.setFont(font)
        self.label4.setWordWrap(False)
        self.label4.setObjectName("label4")
        self.spinBox1 = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox1.setGeometry(QtCore.QRect(460, 137, 61, 22))
        self.spinBox1.setMaximum(999999)
        self.spinBox1.setProperty("value", 300)
        self.spinBox1.setObjectName("spinBox1")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "r/buildapcsales Scraper"))
        self.label1.setText(_translate("MainWindow", "Preferred Tags:"))
        self.plainTextEdit1.setPlaceholderText(_translate("MainWindow", "eg. CPU, GPU, Motherboard"))
        self.label2.setText(_translate("MainWindow", "Include Keywords:"))
        self.plainTextEdit2.setPlaceholderText(_translate("MainWindow", "eg. 9900k, corsair k70"))
        self.label3.setText(_translate("MainWindow", "Exclude Keywords:"))
        self.plainTextEdit3.setPlaceholderText(_translate("MainWindow", "eg. intel, amd, msi"))
        self.pushButton1.setText(_translate("MainWindow", "Apply"))
        self.label6.setText(_translate("MainWindow", "New Posts"))
        self.label7.setText(_translate("MainWindow", "Recent Posts"))
        self.radioButton1.setText(_translate("MainWindow", "Send Push Notifications"))
        self.label5.setText(_translate("MainWindow", "Last update:"))
        self.label4.setText(_translate("MainWindow", "Refresh Interval (sec.):"))


    def get_element_text(self, source, id, l_border, r_border):
        id_index = source.index(id)
        id_sub_str = source[id_index:]
        l_border_index = id_sub_str.index(l_border) + len(l_border)
        r_border_index = id_sub_str.index(r_border)
        return id_sub_str[l_border_index:r_border_index]


    def get_element_text_list(self, source_lst, id, l_border, r_border):
        text_lst = []
        for source in source_lst:
            text_lst.append(self.get_element_text(source, id, l_border, r_border))
        return text_lst


    def get_post_list(self, source, split_id):
        if split_id in source:
            return source.split(split_id)
        else:
            raise Exception("Split ID was not found.")


    def clean_post_list(self, lst, id):
        for x, post in enumerate(lst):
            if id not in post:
                del lst[x]
        return lst




    def set_values(self):

        self.notify = Notify()
        self.options = Options()
        self.options.headless = True
        self.driver = webdriver.Firefox(options=self.options)
        # driver = webdriver.Firefox()
        self.post_id = "_1oQyIsiPHYt6nx7VOmd1sz _3xuFbFM3vrCqdGuKGhhhn0"
        self.tag_id = "_2X6EB3ZhEeXCh1eIVA64XM"
        self.content_id = "\"_eYtD2XCVieq6emjKBH3m\">"
        self.link_id = "_10wC0aXnrUKfdJ4Ssz-o14\"><a href=\""
        preferred_tag = ""
        preferred_content = ""
        self.page_url = "https://www.reddit.com/r/buildapcsales/new"
        self.interval = self.spinBox1.value()
        print(self.interval)
        print("test2")

        self.driver.get(self.page_url)
        while True:
            self.page_source = self.driver.page_source
            # this will create a list that separates the page source by a class id that exists once per post
            # this is so each title, tag, and link can be accessed uniquely
            self.post_html_list = self.get_post_list(self.page_source, self.post_id)
            # removes any non-post (possible Reddit advertisements that may be picked up)
            self.post_html_list = self.clean_post_list(self.post_html_list, self.content_id)
            # since the tag, content, and link lists all use the "post_html_list", they are parallel
            self.tag_list = self.get_element_text_list(self.post_html_list, self.tag_id, "<span>", "</span>")
            self.content_list = self.get_element_text_list(self.post_html_list, self.content_id, self.content_id, "</h3>")
            self.link_list = self.get_element_text_list(self.post_html_list, self.link_id, self.link_id, "\" class=\"")
            print("{}\n{}\n{}\n".format(self.tag_list,self.content_list, self.link_list))
            time.sleep(self.interval)
            self.driver.refresh()

    def button_press(self):
        # t = threading.Thread(target=self.set_values())
        # t.start()
        self.set_values()

def main():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())




if __name__ == "__main__":
    main()

